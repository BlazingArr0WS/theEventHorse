{"version":3,"sources":["services/serviceHelper.js","services/eventService.js","App.jsx","index.js"],"names":["axios","defaults","withCredentials","interceptors","request","use","config","onGlobalSuccess","response","onGlobalError","err","Promise","reject","API_HOST_PREFIX","process","REACT_APP_API_HOST_PREFIX","console","log","getEvents","headers","crossorigin","method","mode","url","then","serviceHelper","catch","logger","Logger","window","LOG_LEVEL","App","state","eventQuantity","eventServices","getEventsSuccess","onError","eventData","info","getDate","currentYear","Date","getFullYear","errResponse","debug","this","Fragment","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","href","aria-haspopup","aria-labelledby","placeholder","React","Component","ReactDOM","render","document","getElementById"],"mappings":"8VACAA,IAAMC,SAASC,iBAAkB,EAEjCF,IAAMG,aAAaC,QAAQC,KAAI,SAASC,GAEtC,OADAA,EAAOJ,iBAAkB,EAClBI,KAiBF,IAWDC,EAAkB,SAAAC,GACtB,OAAOA,GAGHC,EAAgB,SAAAC,GACpB,OAAOC,QAAQC,OAAOF,IAGlBG,EAAkBC,4DAAYC,0BAEpCC,QAAQC,IAAI,kBAAmBJ,GCrC/B,IAEMK,EAAY,WAgBhB,OAAOlB,IAfQ,CACbmB,QAAS,CACP,oCAAoC,EACpC,8BAA+B,IAC/B,+BAAgC,MAChC,eAAgB,oBAElBC,aAAa,EACbC,OAAQ,MAERC,KAAM,OAENC,IAAI,sFAIHC,KAAKC,GACLC,MAAMD,ICpBLE,EAAS,I,OAAIC,GAAO,OAC1BC,OAAOC,UAAY,Q,IA0HJC,E,2MAvHbC,MAAQ,CACNC,cAAe,I,EAQjBf,UAAY,SAAAe,GACVC,IAEGV,KAAK,EAAKW,kBACVT,MAAM,EAAKU,U,EAGhBD,iBAAmB,SAAAE,GACjBV,EAAOW,KAAKD,I,EAGdE,QAAU,WACR,IAEIC,GADc,IAAIC,MACQC,cAC9B,OAHgB,OAGEF,EACTA,EAED,GAAN,OANc,KAMd,YAAuBA,I,EAI3BJ,QAAU,SAAAO,GACRhB,EAAOiB,MAAMD,I,mFA3BbE,KAAK3B,UAAU2B,KAAKb,MAAMC,eAC1BN,EAAOW,KAAK,iB,+BA8BZ,OACE,kBAAC,IAAD,KACE,kBAAC,IAAMQ,SAAP,KACE,yBAAKC,UAAU,yDACb,4BAAQA,UAAU,4BAAlB,UACA,4BACEA,UAAU,iBACVC,KAAK,SACLC,cAAY,WACZC,cAAY,yBACZC,gBAAc,wBACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMN,UAAU,yBAGlB,yBACEA,UAAU,2BACVO,GAAG,yBAEH,wBAAIP,UAAU,sBACZ,wBAAIA,UAAU,mBACZ,4BAAQA,UAAU,wBAAlB,QACO,0BAAMA,UAAU,WAAhB,eAGT,wBAAIA,UAAU,YACZ,4BAAQA,UAAU,wBAAlB,SAEF,wBAAIA,UAAU,YACZ,4BAAQA,UAAU,qBAAlB,aAEF,wBAAIA,UAAU,qBACZ,uBACEA,UAAU,2BACVQ,KAAK,qBACLD,GAAG,aACHL,cAAY,WACZO,gBAAc,OACdJ,gBAAc,SANhB,YAUA,yBAAKL,UAAU,gBAAgBU,kBAAgB,cAC7C,4BAAQV,UAAU,8BAAlB,UAGA,4BAAQA,UAAU,6BAAlB,kBAGA,4BAAQA,UAAU,8BAAlB,0BAMN,0BAAMA,UAAU,4BACd,2BACEA,UAAU,uBACVC,KAAK,OACLU,YAAY,SACZL,aAAW,WAEb,4BACEN,UAAU,uCACVC,KAAK,UAFP,aAUN,4BAAQD,UAAU,aAChB,mDAA2BF,KAAKN,kB,GAhH1BoB,IAAMC,WCHxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.7ccc152f.chunk.js","sourcesContent":["import axios from \"axios\";\r\naxios.defaults.withCredentials = true;\r\n// Add a request interceptor\r\naxios.interceptors.request.use(function(config) {\r\n  config.withCredentials = true;\r\n  return config;\r\n});\r\n\r\n/**\r\n * Will unpack the response body from reponse object\r\n * @param {*} response\r\n *\r\n */\r\n\r\nexport function get() {\r\n  console.log(\"get\");\r\n}\r\n\r\nexport function create() {\r\n  console.log(\"create\");\r\n}\r\n\r\nexport const update = function() {};\r\n\r\nexport const deleteById = function() {};\r\n\r\nexport default { get, create, update, deleteById };\r\n\r\n// const onGlobalSuccess = response => {\r\n//   /// Should not use if you need access to anything other than the data\r\n//   return response.data;\r\n// };\r\n\r\nconst onGlobalSuccess = response => {\r\n  return response;\r\n};\r\n\r\nconst onGlobalError = err => {\r\n  return Promise.reject(err);\r\n};\r\n\r\nconst API_HOST_PREFIX = process.env.REACT_APP_API_HOST_PREFIX;\r\n\r\nconsole.log(\"API_HOST_PREFIX\", API_HOST_PREFIX);\r\n\r\nexport { onGlobalError, onGlobalSuccess, API_HOST_PREFIX };\r\n","import axios from \"axios\";\r\nimport * as serviceHelper from \"./serviceHelper\";\r\n// SAMPLE URLS\r\n// https://api.meetup.com/reactjs-dallas/events?&sign=true&photo-host=public&page=1\r\n// https://api.meetup.com/reactjs-dallas/events/qpxxkrybcdbpb/rsvps?&sign=true&photo-host=public\r\n\r\nconst endpointRoot = serviceHelper.API_HOST_PREFIX + \"/events\";\r\n\r\nconst getEvents = () => {\r\n  const config = {\r\n    headers: {\r\n      \"Access-Control-Allow-Credentials\": true,\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Access-Control-Allow-Methods\": \"GET\",\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    crossorigin: true,\r\n    method: \"GET\",\r\n    // withCredentials: true,\r\n    mode: \"cors\",\r\n    // url: `${endpointRoot}?&sign=true&photo-host=public&page=${eventQuantity}`,\r\n    url: `https://api.meetup.com/reactjs-dallas/events?&sign=true&photo-host=public&page=20`\r\n    // crossdomain: true\r\n  };\r\n  return axios(config)\r\n    .then(serviceHelper.onGlobalSuccess)\r\n    .catch(serviceHelper.onGlobalError);\r\n};\r\n\r\nconst getRSVPById = eventId => {\r\n  const config = {\r\n    method: \"GET\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    url: `${endpointRoot}/${eventId}/rsvps?&sign=true&photo-host=public`,\r\n    crossdomain: true\r\n  };\r\n  return axios(config)\r\n    .then(serviceHelper.onGlobalSuccess)\r\n    .catch(serviceHelper.onGlobalError);\r\n};\r\n\r\nexport { getEvents, getRSVPById };\r\n","import React from \"react\";\r\n// import { BrowserRouter, Route, NavLink } from \"react-router-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport * as eventServices from \"./services/eventService\";\r\nimport { Logger } from \"aws-amplify\";\r\nconst logger = new Logger(\"App\");\r\nwindow.LOG_LEVEL = \"DEBUG\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    eventQuantity: 20\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getEvents(this.state.eventQuantity);\r\n    logger.info(\"Hello World\");\r\n  }\r\n\r\n  getEvents = eventQuantity => {\r\n    eventServices\r\n      .getEvents(eventQuantity)\r\n      .then(this.getEventsSuccess)\r\n      .catch(this.onError);\r\n  };\r\n\r\n  getEventsSuccess = eventData => {\r\n    logger.info(eventData);\r\n  };\r\n\r\n  getDate = () => {\r\n    let firstYear = 2020;\r\n    let currentDate = new Date();\r\n    let currentYear = currentDate.getFullYear();\r\n    if (firstYear === currentYear) {\r\n      return currentYear;\r\n    } else {\r\n      return `${firstYear}-${currentYear}`;\r\n    }\r\n  };\r\n\r\n  onError = errResponse => {\r\n    logger.debug(errResponse);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <React.Fragment>\r\n          <nav className=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\">\r\n            <button className=\"link-button navbar-brand\">Navbar</button>\r\n            <button\r\n              className=\"navbar-toggler\"\r\n              type=\"button\"\r\n              data-toggle=\"collapse\"\r\n              data-target=\"#navbarsExampleDefault\"\r\n              aria-controls=\"navbarsExampleDefault\"\r\n              aria-expanded=\"false\"\r\n              aria-label=\"Toggle navigation\"\r\n            >\r\n              <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n\r\n            <div\r\n              className=\"collapse navbar-collapse\"\r\n              id=\"navbarsExampleDefault\"\r\n            >\r\n              <ul className=\"navbar-nav mr-auto\">\r\n                <li className=\"nav-item active\">\r\n                  <button className=\"nav-link link-button\">\r\n                    Home <span className=\"sr-only\">(current)</span>\r\n                  </button>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <button className=\"nav-link link-button\">Link</button>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <button className=\"nav-link disabled\">Disabled</button>\r\n                </li>\r\n                <li className=\"nav-item dropdown\">\r\n                  <a\r\n                    className=\"nav-link dropdown-toggle\"\r\n                    href=\"http://example.com\"\r\n                    id=\"dropdown01\"\r\n                    data-toggle=\"dropdown\"\r\n                    aria-haspopup=\"true\"\r\n                    aria-expanded=\"false\"\r\n                  >\r\n                    Dropdown\r\n                  </a>\r\n                  <div className=\"dropdown-menu\" aria-labelledby=\"dropdown01\">\r\n                    <button className=\"dropdown-item  link-button\">\r\n                      Action\r\n                    </button>\r\n                    <button className=\"dropdown-item link-button\">\r\n                      Another action\r\n                    </button>\r\n                    <button className=\"dropdown-item  link-button\">\r\n                      Something else here\r\n                    </button>\r\n                  </div>\r\n                </li>\r\n              </ul>\r\n              <form className=\"form-inline my-2 my-lg-0\">\r\n                <input\r\n                  className=\"form-control mr-sm-2\"\r\n                  type=\"text\"\r\n                  placeholder=\"Search\"\r\n                  aria-label=\"Search\"\r\n                />\r\n                <button\r\n                  className=\"btn btn-outline-success my-2 my-sm-0\"\r\n                  type=\"submit\"\r\n                >\r\n                  Search\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </nav>\r\n\r\n          <footer className=\"container\">\r\n            <p>&copy; The Event Horse {this.getDate()}</p>\r\n          </footer>\r\n        </React.Fragment>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}